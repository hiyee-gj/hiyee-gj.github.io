<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/author/hiyee/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-04-18T18:10:11+09:00</updated>
  <id>http://localhost:4000/author/hiyee/feed.xml</id>

  
  
  

  
    <title type="html">Hiyee Blog | </title>
  

  
    <subtitle>Developer with good Influence</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">003. Project - gi &amp;amp; github, products view</title>
      <link href="http://localhost:4000/003-project" rel="alternate" type="text/html" title="003. Project - gi &amp; github, products view" />
      <published>2021-04-18T00:00:00+09:00</published>
      <updated>2021-04-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/003-project</id>
      <content type="html" xml:base="http://localhost:4000/003-project">&lt;h2 id=&quot;git--github&quot;&gt;Git &amp;amp; Github&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에는 많은 기능들이 있고, 더 어려운 기능들도 많다고 한다 이번 프로젝트를 진행하면서, &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;에 대해서 고통받는 부분이 많아서 따로 설명을 추가적으로 듣게 되었다. 그 내용에 대해서 정리하는 글이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;순서&quot;&gt;순서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트가 시작되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;가 생성되었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; 받아서 초기세팅을 완료했고, &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에도 반영해주었다&lt;/li&gt;
  &lt;li&gt;초기세팅이 완료되고, 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt;을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과 같은 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;을 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;에 저장했다&lt;/li&gt;
  &lt;li&gt;나는 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에서 내가 담당하는 기능의 이름을 지닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature/기능&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;를 하나 생성했고, 그 안에서 작업을 계속 했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;생겼던-의문&quot;&gt;생겼던 의문&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;각각 처음은 같은 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에서 시작했지만, 작업하다보면 각자 속도도 다를 것이기 때문에 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;된 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;된다면, 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;이 달라지는 점에서 의문이 들었다
    &lt;ul&gt;
      &lt;li&gt;이런 상황을 해결하기 위해(협업을 위해) &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;된 새로운 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;이 존재한다면, 나는 작업이 끝난후 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;에서 우선, &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 단계만 실시한다(log에는 commit 내용이 보일 것임)&lt;/li&gt;
      &lt;li&gt;그 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;으로 다시 갈아끼운다(내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;에 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;임 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;의 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과는 다름)&lt;/li&gt;
      &lt;li&gt;그럼 내 상태는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;이고, 이 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 있는 새로운 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;해와서 버전을 일치시킨다&lt;/li&gt;
      &lt;li&gt;그 후 다시 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;(featur/기능)으로 갈아끼운 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여기까지가 기본적인 흐름이고, 아주 기초적인 내용이라고 한다……나중에 더 어려운게 있다고 하니 그 때 다시 한번 정리하도록 하겠다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;products-view&quot;&gt;Products View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/0c4c810e-783b-4e4e-986b-8fd97467986a/%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;처음에는 막막하게 시작했지만, 작성하다보니 모든 기능을 한번에 구현하려는 욕심을 버리는 것이 오히려 좋은 시작단추가 되었다&lt;/li&gt;
  &lt;li&gt;우선 큰 틀을 닦아놓은 후, 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;mainview&lt;/code&gt;에서라면 우선 모든 상품을 보여주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;를 작성한 후, 조건들을 추가해 나갔다&lt;/li&gt;
  &lt;li&gt;중간 쯤 보이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;list comprehension&lt;/code&gt;은 코드의 길이도 줄여주지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;for문&lt;/code&gt;보다 무려 2배가 빠르다고 한다. 우선 내 실력이 되는 부분은 간단한 부분의 &lt;code class=&quot;highlighter-rouge&quot;&gt;list comprehension&lt;/code&gt;이었지만, 피드백 후 바꿀 수 있는 부분에 대해선 고민해 보려 한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/fd7ea9be-ba46-4eaf-81a4-a9c7e1ea5d5e/%E1%84%8F%E1%85%A1%E1%84%90%E1%85%A6%E1%84%80%E1%85%A9%E1%84%85%E1%85%B5%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt;되는 창에 카테고리를 표시해 줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에 비해서 어려운 부분이 없었다. 지금 글을 쓰면서 보니, &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt; 부분은 필요없는 부분 같아서 제거했다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c8999ae2-6208-4818-852c-c942432f40d2/%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%20%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;내게 고통을 선사한 검색 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;서로 다른 테이블의 조건들을 한번에 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;해야 하는 부분에서 정말 많이 고민했고, 실패했고, 점점 더 복잡해져가는 찰나 &lt;code class=&quot;highlighter-rouge&quot;&gt;django shell&lt;/code&gt;에서 여러 관계를 뒤적거린 후 한숨을 쉬게된 작업이었다&lt;/li&gt;
  &lt;li&gt;생각보다 쉽게 불어올 수 있는 방법이 있었고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt;라는 모듈의 갓갓 기능도 한 몫 해줬다&lt;/li&gt;
  &lt;li&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;부터는 굳이 하나의 값이 들어있는 리스트라면 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;화 된 상태로 &lt;code class=&quot;highlighter-rouge&quot;&gt;reponse&lt;/code&gt;하지 않고, 프론트엔드에서 좀 더 포장을 뜯기 쉽게 객체로 불러와서 보내는 여유를 가지고?? 작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">Git &amp;amp; Github</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">002. Project - pagination, path variable, query parameter</title>
      <link href="http://localhost:4000/002-project" rel="alternate" type="text/html" title="002. Project - pagination, path variable, query parameter" />
      <published>2021-04-18T00:00:00+09:00</published>
      <updated>2021-04-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/002-project</id>
      <content type="html" xml:base="http://localhost:4000/002-project">&lt;h2 id=&quot;pagination&quot;&gt;Pagination&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 한 화면에서 얼마나 보여줄 지 정하는 것을 말한다&lt;/li&gt;
  &lt;li&gt;이 과정에서 어떤 방식으로 페이지를 나눌지 담당 프론트엔드 개발자와 협의가 필요하다&lt;/li&gt;
  &lt;li&gt;흔히 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;으로 기능 구현하는데, 이 방식이 좀 더 manual한 방법이라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;는 이 기능을 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator&lt;/code&gt;라는 모듈이 존재한다&lt;/li&gt;
  &lt;li&gt;하지만, 이번 프로젝트에서는 최대한 장고가 제공하는 편의 기능들에 해당하는 수동적인 메커니즘이 있다면, 공부를 위해 잠시 장고의 모듈은 배제하기로 결심했기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator&lt;/code&gt;에 대해서는 구글링을 통해 알아보기 바란다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;원리&quot;&gt;원리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt;의 원리는 놀랍도록 간단하다&lt;/li&gt;
  &lt;li&gt;백엔드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;할 내용이 담긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;라는 리스트가 있다고 한다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt;은 일정한 기준을 가지고, 이 리스트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt; 처리하는 것이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RESULT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;생각보다 구현은 어렵지 않았다. 다만 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 정할 때, 각 페이지에 보여주고 싶은 객체의 수를 정하고, 프론트에서 계산을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 보내줄지, 백엔드에서 계산을 통해 보내줄지 정해야 하는 부분이 더 고민되는 부분이었다
    &lt;ul&gt;
      &lt;li&gt;우리 팀은 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parmeter&lt;/code&gt;에 담기는 의미가 좀 더 직관적인 것을 선호 해서 프론트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;에 값을 담아 주면, 백엔드에서 계산을 통해 되돌려 주는 방식을 택했다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/944baa46-5416-4c51-99ad-fe6b4179162a/%E1%84%91%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;에 값이 들어 오면, 한 페이지에 보여주고 싶은 객체 수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;page_size&lt;/code&gt;를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 계산해주고, 그 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt;해서 보내주는 방식이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;path-variable-vs-query-parameter&quot;&gt;path variable vs query parameter&lt;/h2&gt;

&lt;h3 id=&quot;endpoint&quot;&gt;Endpoint&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENDPOINT&lt;/code&gt;란 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;가 서버에서 리소스에 접근할 수 있도록 가능하게 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 프로그램이 기능할 수 있게 명령을 정리하고, 명령을 받으면 응용프로그램과 상호작용하여 요청된 명령에 대한 값을 전달해준다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 프로그램들이 서로 상호작용하는 것을 도와주는 매개체로 볼 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;api의-역할&quot;&gt;API의 역할&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 서버와 데이터베이스에 대한 출입구 역할을 한다
    &lt;ul&gt;
      &lt;li&gt;데이터베이스에는 소중한 정보들이 저장되는데, 모든 사람들이 이 데이터베이스에 접근할 수 있으면 보안에 문제가 생길 것이다 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 이를 방지하기 위해 서버와 데이터베이스에 대한 출입구 역할을 하며, 허용된 사람들에게만 접근성을 부여해 주는 역할을 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;path-vs-query&quot;&gt;path vs query&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt;를 구성하다보면, 같은 맥락인데 보여주고 싶은 내용이 다를 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;들면&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;로 주로 표현하는 이유가 뭘까? 답은 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;에는 하나의 객체가 아닌 여러 객체들로 이뤄져 있기 때문이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상품을 보여주는 커머스 사이트를 예로 들어보자. 모든 상품을 보여주고 싶은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/products&lt;/code&gt;를 엔드포인트로 갖는 페이지가 있는 반면, 한 상품의 상세 내용을 보여주고 싶은 경우도 있다&lt;/li&gt;
  &lt;li&gt;이 경우에 보여주는 방법에 대해서 어떻게 표현할 것인가? 이 표현 방법이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;path variable&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;의 방식이 존재하는 것이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 이 두가지 방식 중 어떤 방식을 어떤 상황에 주로 사용하는지 정리해 보겠다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;흔히 두 방식 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;가 달라지면, &lt;code class=&quot;highlighter-rouge&quot;&gt;path variable&lt;/code&gt;을 사용하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;의 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;를 사용한다고 말한다&lt;/li&gt;
  &lt;li&gt;원리를 살펴보자면, 우선 어떤 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;를 식별해야하는 상황을 생각해보자
    &lt;ul&gt;
      &lt;li&gt;쿼리의 경우, 서버에서는 어느 방식으로 넘어오던지 간에 받아온 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;의 정해진 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;로 쿼리를 날리게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Query Parameter&lt;/code&gt;는 서버로 데이터가 넘어가고 쿼리를 날리며 해당하는 데이터가 없을 경우 따로 에러 핸들링을 해줘야 하는 번거로움이 존재한다&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Path Variable&lt;/code&gt;은 저 경로의 존재하는 페이지가 없으므로 404 에러를 발생한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;를 식별해야하는 상황에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Path Variable&lt;/code&gt;가 더 적합하다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;당연히 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 되는 값이 없다고 404를 띄울 수 없기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;의 방식이 더 유연할 것이다(빈 리스트를 보여줄 것이므로)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">Pagination</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">001. Project - 초기세팅, mysqldump, django seed</title>
      <link href="http://localhost:4000/001-project" rel="alternate" type="text/html" title="001. Project - 초기세팅, mysqldump, django seed" />
      <published>2021-04-14T00:00:00+09:00</published>
      <updated>2021-04-14T00:00:00+09:00</updated>
      <id>http://localhost:4000/001-project</id>
      <content type="html" xml:base="http://localhost:4000/001-project">&lt;h2 id=&quot;projectgreatingdor&quot;&gt;project(greatingdor)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;greatingmall clone coding&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;초기세팅&quot;&gt;초기세팅&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; 프로젝트를 생성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;my_settings&lt;/code&gt; 설정과 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; 제거&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 파일이 프로젝트 폴더 안에 생성 되게 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;백엔드 팀과 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit massage convention 정하기&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;feat&lt;/code&gt;: 새로운 기능 추가
&lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt;: 버그 수정
&lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;: 문서 수정
&lt;code class=&quot;highlighter-rouge&quot;&gt;refactor&lt;/code&gt;: 코드 리팩토링
&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;: 코드 포맷팅(코드변경없음)
&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;: 테스트 코드 작성
&lt;code class=&quot;highlighter-rouge&quot;&gt;chore&lt;/code&gt;: 소스코드를 건들지 않는 작업
&lt;code class=&quot;highlighter-rouge&quot;&gt;git 컨벤션 형태&lt;/code&gt; : [#이슈번호] 종류: 제목
예시 - &lt;code class=&quot;highlighter-rouge&quot;&gt;[#1] Chore: 프로젝트 초기 세팅 (edited) &lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mysqldump&quot;&gt;mysqldump&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;djagno&lt;/code&gt;에서 프로젝트를 하다보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;에서 수정사항이 생기는 경우가 많다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;를 수정하고 적용하려고 보면, 데이터베이스가 꼬이거나 제대로 적용이 안되는 경우 또한 빈번히 발생한다&lt;/li&gt;
  &lt;li&gt;더미 데이터의 경우 이 글 다음에 오는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;를 사용하면 되지만, 중요한 데이터의 경우 저장해 놓는 편이 안전하고, 또 저장한 데이터를 불러와서 데이터베이스를 다시 구성한다면, 복구하는데 걸리는 시간 또한 적게 들어간다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;의 대표적인 백업 프로그램으로 스토리지 엔진에 상관없이 백업을 받을 수 있는 도구이다(물리적인 데이터 복사가 아닌 Logical 백업 도구임), 내가 저장하려는 데이터베이스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; 형태로 저장하는 도구이다&lt;/li&gt;
  &lt;li&gt;사용법에 대해서는 더 다양한 사용법이 존재하지만, 여기서는 전체 데이터베이스를 저장하고, 다시 복구하는 사용법만 기록한다, 테이블 단위나, 더 세세한 적용법에 대해서는 구글링을 해보길 바란다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;데이터가 저장되길 원하는 장소에서 명령문을 실행해도 되고, 경로를 지정할 수도 있지만 주로 원하는 곳에서 실행하는 것 같다&lt;/li&gt;
  &lt;li&gt;명령어를 입력할 때, 어려운 부분은 없지만 괄호의 방향을 헷갈리면, 데이터베이스를 손상시킬 수 있기 때문에 신경써 주는 것이 좋다&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Export:

1. 데이터베이스 전체를 추출할 경우
mysqldump -u 아이디 -p -A &amp;gt; 파일이름.sql

2. 특정 DB를 백업하는 경우(주로 사용)
mysqldump -u 아이디 -p DB명 &amp;gt; 파일이름.sql

Import:

1. mysql -u root -p &amp;lt; 파일이름.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/7a3d021e-9bc5-48d2-a37d-03060575fc64/%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3%20%E1%84%8C%E1%85%B5%E1%84%8B%E1%85%AE%E1%84%80%E1%85%B5%20%E1%84%8C%E1%85%A5%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 지우기 전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;의 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e88ac0d1-44d3-4fd6-8879-1a6f1feade0d/%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%8B%E1%85%B1%E1%84%8E%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; 파일을 저장할 위치로 이동한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/83f4f588-7f29-4b72-8a05-d20c404b553a/sql%20%E1%84%8C%E1%85%A5%E1%84%8C%E1%85%A1%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;를 저장하는 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c9915c55-4bb4-42c2-98dd-5204afb8e045/import%20%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;를 다시 복구하는 과정&lt;/li&gt;
  &lt;li&gt;여기서 삭제한 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;를 데이터베이스에 다시 생성해 논 상태이다(데이터베이스에는 새롭게 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;가 비어있는 상태로 존재하고 있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e59670df-8813-4a17-90f0-eb2700b09205/%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3%20%E1%84%8C%E1%85%B5%E1%84%8B%E1%85%AE%E1%84%80%E1%85%B5%20%E1%84%8C%E1%85%A5%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다시 복구된 데이터 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/9eda581f-f4ca-4dc1-9bf4-da00424467d4/%E1%84%82%E1%85%A2%E1%84%87%E1%85%AE%20%E1%84%90%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%87%E1%85%B3%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;내부의 테이블과 데이터까지 모두 살아있는 모습&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;django-seed&quot;&gt;django seed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트를 하다보면 백엔드에서 테스트를 진행할 더미 데이터가 필요하게 된다&lt;/li&gt;
  &lt;li&gt;직접 입력해서 데이터를 구성하는 것도 좋지만, 위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt;에서 설명한 경우가 발생할 때마다 또다시 데이터를 쌓는 작업은 피로하고, 비효율적인 작업처럼 느껴진다&lt;/li&gt;
  &lt;li&gt;이럴 경우 활용 가능한 것이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Django Seed&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;이다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;라는 라이브러리 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Django seed&lt;/code&gt;가 존재하기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;만 설치한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;faker&lt;/code&gt; 또한 사용할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;또한 각 모델에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;OneToOneField&lt;/code&gt;냐, &lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;냐, &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKeyField&lt;/code&gt;냐에 따라 작성하는 코드가 조금씩 달라진다(&lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 관한 문제인데, 이 내용은 구글링을 통해서 찾아서 해결하길 바란다, 이 글은 기본적인 기능에 대한 정리)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;설치
pip install django-seed&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;는 기본적으로 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;의 필드를 보고 생성해주어야 할 더미 데이터에 대해서 판단한다
    &lt;ul&gt;
      &lt;li&gt;예를 들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Emailfield&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Charfield&lt;/code&gt;와 크게 다를 점이 없어서 사용하지 않았지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;로 인식해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; 형식으로 출력해 준다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Seed&lt;/code&gt; 파일을 생성할 때는 내가 적용하고자 하는 앱의 하위에 생성해 줘야 한다
    &lt;blockquote&gt;
      &lt;p&gt;원하는 앱 안으로 이동 후
mkdir management
cd management
mkdir commands
touch &lt;strong&gt;init&lt;/strong&gt;.py commands/&lt;strong&gt;init&lt;/strong&gt;.py commands/seed_users.py&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/adaa2adf-0221-405b-880c-bd6324a91e45/%E1%84%8B%E1%85%B2%E1%84%8C%E1%85%A5%20%E1%84%80%E1%85%A7%E1%86%BC%E1%84%85%E1%85%A9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;적용하고자 하는 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;management&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; 생성한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/9c23aa8f-4574-404f-bde6-e480c2865654/%E1%84%8C%E1%85%A1%E1%86%BC%E1%84%80%E1%85%A9%20%E1%84%8B%E1%85%B5%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%91%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;의 내용이다, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Seed&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;를 불러왔다&lt;/li&gt;
  &lt;li&gt;위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;argument&lt;/code&gt; 부분은 옵션의 기능이라고 생각하면 된다(생략해도 되는 부분)
    &lt;ul&gt;
      &lt;li&gt;읽어보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;에 대한 정의 부분인 듯&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; 부분이 자동 생성할 데이터에 대한 설정 부분이다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt;을 살펴보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;name, phone_number, password&lt;/code&gt; 에 대해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;를 이용해서 데이터 값의 형태를 잡아준 모습이다&lt;/li&gt;
      &lt;li&gt;위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;seeder&lt;/code&gt; 부분은 설정해줘야 하는 값들이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;seeder&lt;/code&gt; 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;locale&lt;/code&gt; 부분은 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;에서 한국 이름을 생성하고 싶어서 설정한 값이다(&lt;code class=&quot;highlighter-rouge&quot;&gt;faker&lt;/code&gt; 또한 같은 맥락)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여기서 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;에 대한 설정은 없다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/7ca26ecb-32b7-419c-82be-8a566701ea8a/%E1%84%8B%E1%85%B2%E1%84%8C%E1%85%A5%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;users/models.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;를 사용한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e7e3cba2-d9cf-4718-8401-3fc506a5c29f/%E1%84%8B%E1%85%B5%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%86%E1%85%A1%E1%86%AB%E1%84%83%E1%85%B3%E1%86%AF%E1%84%8B%E1%85%A5%E1%84%8C%E1%85%AE%E1%86%B7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;가 자동으로 생성해준 이메일, 이처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;가 이메일 필드를 인식하고 생성해줬기 때문에, 앱 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;를 작성해야 한다는 점에서는 이해가 됐을 거라 생각한다&lt;/li&gt;
  &lt;li&gt;우리가 원하는 앱 안에 원하는 형태로 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;를 작성하게 되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt;가 있는 곳에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;를 찍었을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; 기능이 생성된다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/36ad472c-e954-4a91-9451-0e22f1fb15e1/%E1%84%92%E1%85%A6%E1%86%AF%E1%84%91%E1%85%B3%20%E1%84%89%E1%85%A2%E1%86%BC%E1%84%89%E1%85%A5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt;가 있는 곳에서 명령어를 실행하면 된다
    &lt;blockquote&gt;
      &lt;p&gt;python manage.py seed_users(생성된 seed파일 이름)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-![](https://images.velog.io/images/hiyee-gj/post/cdcda335-f717-450e-914a-168c17c13471/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5.png)gj/post/3f3173dc-fe32-480b-a43d-cdb302fe84cf/%E1%84%89%E1%85%A5%E1%86%BC%E1%84%80%E1%85%A9%E1%86%BC%20%E1%84%86%E1%85%A6%E1%84%89%E1%85%B5%E1%84%8C%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;성공했을 경우 몇 개를 생성했는지 성공 메시지를 알려준다(&lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; 파일에서 설정한 내용임)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seed로-데이터-형태-다듬기&quot;&gt;seed로 데이터 형태 다듬기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;여러 데이터 형태를 확인하기 위해 테스트용 &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;을 만들어서 확인한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/2d0bc3bc-7f3b-4813-b7bd-99ddbd440c8e/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;모델
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/b9361d46-8f28-4a34-8416-ce80cfcbb6dc/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20seeder.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;시드파일
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/247634fb-74e7-4c00-9b91-106262fcd4ed/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;자동 생성된 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seed-응용&quot;&gt;seed 응용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;관계가 형성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;을 자동 생성해주면 생기는 문제가 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 대한 문제가 발생하는 경우다&lt;/li&gt;
  &lt;li&gt;이 경우에는 관계가 맺어진 테이블을 불러온 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 불러온 테이블의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;를 랜덤하게 설정해주는 방법으로 해결한다&lt;/li&gt;
  &lt;li&gt;이 경우를 응용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; 필드의 내용을 실제로 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;img url&lt;/code&gt;을 저장한 파일을 불러와 랜덤하게 설정해서 실제 작동되도록 하는 방법을 공부할 예정이다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">project(greatingdor)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">009. Django - westagram 3 review</title>
      <link href="http://localhost:4000/009-django" rel="alternate" type="text/html" title="009. Django - westagram 3 review" />
      <published>2021-04-10T00:00:00+09:00</published>
      <updated>2021-04-10T00:00:00+09:00</updated>
      <id>http://localhost:4000/009-django</id>
      <content type="html" xml:base="http://localhost:4000/009-django">&lt;h2 id=&quot;westagram-3-review&quot;&gt;westagram 3 review&lt;/h2&gt;

&lt;h3 id=&quot;post게시물-등록-및-불러오기&quot;&gt;Post(게시물 등록 및 불러오기)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 앱을 만들었고, &lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt; 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;installed&lt;/code&gt;에 추가해 줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;modelspy-작성&quot;&gt;models.py 작성&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/d44f8cae-7e5f-478d-ba7e-d671fdb7c7b3/%E1%84%91%E1%85%A9%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; 모델과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; 모델 작성
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;comment&lt;/code&gt;의 경우 프론트엔드와 통신까지 해보진 못했으므로 이번 리뷰에서 제외합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; 컬럼에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 테이블을 참조하도록 설정
    &lt;ul&gt;
      &lt;li&gt;같은 프로젝트 안의 앱이라면 경로 설정해주지 않아도 테이블을 사용할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; 필드의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;을 받아야 하므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;max_length&lt;/code&gt;를 길게 설정해 줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;decorator-작성&quot;&gt;decorator 작성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 했던 리뷰에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;의 특징으로 한번 수행한 내용에 대해서 기억하지 않는다는 것을 말했다 로그인 이후 사용자가 매번 어떤 작업을 수행할 때마다 재로그인할 수 없기 때문에 인증 때 발행한 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 통해서 사용자가 로그인 상태임을 확인한다&lt;/li&gt;
  &lt;li&gt;모든 로직에 인가과정을 기록하면 코드 가독성이 떨어지고, 개발하는 시간도 비효율적으로 증가할 것이다&lt;/li&gt;
  &lt;li&gt;때문에 등장한 &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt;형식으로 인가하는 과정을 구현하고, 각 로직앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt;를 가져와 사용해서 인가를 하는 방식이다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/8806c7b8-2c8d-48f3-90b2-58db85d25443/%E1%84%91%E1%85%A9%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%E1%84%83%E1%85%A6%E1%84%8F%E1%85%A9%E1%84%85%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;에 담긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; 해줘야 하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;jwt&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;함&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;encode&lt;/code&gt;할 때 사용했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;secret_key&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;algorithm&lt;/code&gt;을 가져온다
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;여기서 주의할 점&lt;/strong&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;encode&lt;/code&gt; 할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;algorithm=내가 설정한 알고리즘&lt;/code&gt;이었다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt;에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;algorithms=내가 설정한 알고리즘&lt;/code&gt;으로 작성해야 한다&lt;/li&gt;
      &lt;li&gt;위 사진에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;headers&lt;/code&gt;에 담긴 토큰을 가져올 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt;을 사용한 것을 알 수 있다 - &lt;strong&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;의&lt;code class=&quot;highlighter-rouge&quot;&gt;corsheaders&lt;/code&gt; 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;allowed headers&lt;/code&gt;안의 값이었다, 즉 임의로 바꿔서 프론트엔드와 맞춘다고 해서 작동하지 않는다!!!!&lt;/strong&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e1d548ec-060f-4328-a7fd-da822d497c81/%E1%84%8B%E1%85%A5%E1%84%8A%E1%85%A5%E1%86%AF%E1%84%85%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AB.png&quot; alt=&quot;&quot; /&gt; - 추가하자면, 컨벤션인 듯 하다, 따로 바꿔서 사용하려는 시도는 하지 말자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt;하면 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;로 설정했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;가 튀어나온다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;를 사용한 이유는 토큰이 유출되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; 되더라도, 사용자에게 치명적인 정보가 유출되는 것을 막을 수 있기 때문이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt;된 유저 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;가 내 데이터베이스에 존재한다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;를 생성해서, 해당 유저의 정보를 담아준다&lt;/li&gt;
  &lt;li&gt;이후 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;를 잘 포장해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;시켜주면, &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt;를 먼저 실행시키고, 이후 로직이 적용되게 작성하게 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;중간-흐름-파악&quot;&gt;중간 흐름 파악&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;지금 흐름을 파악해보자
    &lt;ul&gt;
      &lt;li&gt;새로운 앱 생성 ➡️ &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 앱 등록 ➡️ 앱 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt; 작성 ➡️ &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;에서 사용할 데코레이터 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;작성하는 순서가 중구난방이 아닌 내가 개발하는 흐름에 맞게 지금 단계에서 뭘하고 있는지 알면서 하는 것이 중요하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;viewspy-작성&quot;&gt;views.py 작성&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/3421b20b-076c-496d-85b4-ca4af074f42e/%E1%84%91%E1%85%A9%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%E1%84%87%E1%85%B2import%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%89%E1%85%A5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여느 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 내용이다(원래는 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 기준으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;align&lt;/code&gt;하는게 컨벤션이지만, 시간이 부족해서 기능만 구현하고, 리팩토링을 진행하지 못했다)&lt;/li&gt;
  &lt;li&gt;추가된 점이라면, 사용하려고 작성해둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;appropriation&lt;/code&gt;)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 해줬다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/508dc1a9-79cf-451e-b993-006db6662b6f/%E1%84%91%E1%85%A9%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3views%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%89%E1%85%A5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 메소드와 &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; 메소드에 대한 로직이다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;decorator&lt;/code&gt; 작성단계부터 자세히 보신 분들은 알겠지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;에 대해서 세분화하지 않고, 통으로 처리하고 있다. 이 또한, 정해진 시간안에서 기능만 구현하려고 처리한 내용이니, 본인의 상황에 맞게 생각대로 에러를 처리해 주면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;통신&quot;&gt;통신&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/4aed5f28-ed34-46d1-bd09-76082493e709/ip%20%E1%84%80%E1%85%A1%E1%84%8C%E1%85%A7%E1%84%8B%E1%85%A9%E1%84%80%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt;를 확인하고, 프론트엔드에 알려줘야 한다&lt;/li&gt;
  &lt;li&gt;그리고 내 로직에 접근할 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;의 경로 또한 알려줘야 한다&lt;/li&gt;
  &lt;li&gt;프론트엔드에서 경로에 맞게 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;하고, 올바른 메소드와 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;한다
    &lt;ul&gt;
      &lt;li&gt;당연한 얘기지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;에 담을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; 이름에 대해서 협의를 통해서 맞춰야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정확하게 통신이 됐다면, 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 했던, 메세지와 상태코드가 뜰 것이고, 에러 또한 내가 컨트롤 하고 있었다면 정해진 메세지와 상태코드가 뜰 것이다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/a245c5df-211a-4bf8-ae67-2c644757a44f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-04-07%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.10.50.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;로그인 시에 성공했다는 메세지와 함께, 토큰을 보내 준 모습이다&lt;/li&gt;
  &lt;li&gt;여기서 헷갈려하는게 &lt;code class=&quot;highlighter-rouge&quot;&gt;westagram 1&lt;/code&gt;에서 진행했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;hashed password&lt;/code&gt;인 부분이라고 생각한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hashed password&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;의 정보 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;를 보안을 목적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;화 해서 저장한 것이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;은 유저가 로그인 상태라는 것을 지속적으로 확인하기 위해(인가) 프론트엔드와 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 통해 정보를 주고 받는 용도이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;westagram-후기&quot;&gt;westagram 후기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;의외로 전에 연습했던 단계들이 있어서 그런지, 데이터베이스를 구성하는 단계에서는 흐름대로, 생각대로 흐름을 가지고 진행할 수 있었다&lt;/li&gt;
  &lt;li&gt;다만, 내가 구성한 데이터베이스를 프론트엔드와 통신하면서 화면에 띄우는 것은 다른 문제였다&lt;/li&gt;
  &lt;li&gt;대부분이 사소한 오타나, 변수명을 확인하지 못한 문제였지만, 위에서 언급한 &lt;code class=&quot;highlighter-rouge&quot;&gt;corsheader&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;allowed headers&lt;/code&gt;와 관련된 것은 알지 못한다는 이유 하나로 파트너를 고생시키며, 3시간 가량이나 시간이 소요됐다.&lt;/li&gt;
  &lt;li&gt;어떤 기능을 한다는 것을 안다고 그 기능을 이해한 것은 아니라는 것을 알게되었다. 때문에 다음 공부는 &lt;code class=&quot;highlighter-rouge&quot;&gt;corsheader&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;에 대한 공부가 될 것 같다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">westagram 3 review</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">008. Django - westagram 2 review</title>
      <link href="http://localhost:4000/008-django" rel="alternate" type="text/html" title="008. Django - westagram 2 review" />
      <published>2021-04-08T00:00:00+09:00</published>
      <updated>2021-04-08T00:00:00+09:00</updated>
      <id>http://localhost:4000/008-django</id>
      <content type="html" xml:base="http://localhost:4000/008-django">&lt;h2 id=&quot;westagram&quot;&gt;westagram&lt;/h2&gt;

&lt;h3 id=&quot;loginview-review&quot;&gt;LoginView review&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/90a7cbf0-7c76-409f-8773-8cbcb5915ce3/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유저 입장에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 할 수 있는 공간은 하나이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;phone_number&lt;/code&gt; 중 하나를 입력하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;request body&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt;로 담아서 받게끔 빌드함&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; 부분에서 입력된 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;encode&lt;/code&gt;하고, 데이터베이스에서 가져온 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;encode&lt;/code&gt; 했을 때, 일치한다면 성공 메시지와 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 보내줌(인증)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bycrypt&quot;&gt;bycrypt&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 리뷰한 &lt;code class=&quot;highlighter-rouge&quot;&gt;westagram&lt;/code&gt; 이후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;화 해서 저장해서 보안을 높이는 작업을 진행했다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcrypt&lt;/code&gt; 초기 세팅 과정은 생략하도록 한다&lt;/li&gt;
  &lt;li&gt;회원가입 때 입력받은 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;bcrypt&lt;/code&gt;를 이용해서, &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;화 시킨다, 이 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;가 된다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;의 형태는 &lt;code class=&quot;highlighter-rouge&quot;&gt;b'해쉬값&lt;/code&gt; 형태를 이루게 되는데 이게 데이터베이스에 들어가면, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;의 뜻으로 인식하지 않고, 하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; 값으로 인식해서 저장한다
    &lt;ul&gt;
      &lt;li&gt;그렇게 되면 당연히 로그인 과정에서 불러온 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;encode&lt;/code&gt; 했을 때, 입력값과 다른 값으로 출력될 것이고, 로그인이 되지 않는 문제가 발생한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위 문제점 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;bcrypt&lt;/code&gt;로 해쉬화한 비밀번호를 저장할 때는 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt;해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;를 제거한 후에 저장해 준다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jwt&quot;&gt;jwt&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;의 특징 중에 하나는 담고 있던 내용에 대해서 기억하지 않는다는 것이다 때문에 로그인 이후에 로그인 했다는 기억을 가지고 있지 않게 된다&lt;/li&gt;
  &lt;li&gt;로그인이 되어 있다는 신호를 주기 위해 사용하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;서버에서 최초 로그인 시에 인증을 뜻하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 발행해 주고, &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; 받은 프론트에서 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;으로 다른 작업들의 권한 승인요청을 한다(&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;의 저장 방식에 대해서는 추후 프로젝트에서 리뷰할 예정이다)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">westagram</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">007. Django - westagram review 1</title>
      <link href="http://localhost:4000/007-django" rel="alternate" type="text/html" title="007. Django - westagram review 1" />
      <published>2021-04-06T00:00:00+09:00</published>
      <updated>2021-04-06T00:00:00+09:00</updated>
      <id>http://localhost:4000/007-django</id>
      <content type="html" xml:base="http://localhost:4000/007-django">&lt;h2 id=&quot;westagram&quot;&gt;Westagram&lt;/h2&gt;

&lt;h3 id=&quot;초기-세팅&quot;&gt;초기 세팅&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; 새로운 가상환경 &lt;code class=&quot;highlighter-rouge&quot;&gt;westagram&lt;/code&gt; 생성&lt;/li&gt;
  &lt;li&gt;pip install &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlclient&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ipython&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;django-cors-headers&lt;/code&gt; 설치&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;westagram&lt;/code&gt; 클론해오고, 가이드 따라서 프로젝트 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_settings&lt;/code&gt; 생성해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 올라가면 안되는 설정들 옮겨놓고, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에서 주석처리할 내용들 주석처리하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;installed.apps&lt;/code&gt;에 pip install 했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;corsheaders&lt;/code&gt;와 middleware 설정&lt;/li&gt;
  &lt;li&gt;프로젝트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 앱 생성, &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 앱 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modelspy-작성&quot;&gt;models.py 작성&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c63fbdb2-1d11-463a-b410-d6d56cfa058e/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;modelspy-review&quot;&gt;models.py review&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;가 특별한 기능을 가지지 않아 &lt;code class=&quot;highlighter-rouge&quot;&gt;CharField&lt;/code&gt; 써도 똑같을 것 같음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phone&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhoneField&lt;/code&gt;를 사용하기 위해서 pip install 까지 했는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhoneField&lt;/code&gt;가 하는 역할이 없어서 사용할 필요성이 없어 보임&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validationpy-작성&quot;&gt;validation.py 작성&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/284f6676-50d3-443a-898a-67b6be63959d/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%87%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;phone&lt;/code&gt;의 유효성을 확인하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;validator&lt;/code&gt; 작성&lt;/li&gt;
  &lt;li&gt;정규표현식으로 작성하면 더 간단하게 처리할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;viewspy-작성회원가입&quot;&gt;views.py 작성(회원가입)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/f3ada5a5-d9aa-46a1-bb11-29958055b09b/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%92%E1%85%AC%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%80%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;회원가입-review&quot;&gt;회원가입 review&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;validation.py&lt;/code&gt; 적용하기 전 모습&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;파이썬 컨벤션에 맞게 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;에 맞춰 정리&lt;/li&gt;
  &lt;li&gt;성공했을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 값이 해당 코드 바로 뒤에 오게 해서 가독성 높이기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;문 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 하는데 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; 쓰는 이유&lt;/li&gt;
  &lt;li&gt;오류 메시지는 프론트엔드 개발자가 보는 내용이기 때문에 굳이 한글로 쓸 필요 없음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;문 사이 빈칸 추가로 가독성 높이기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; 변수명 더 명확하게 수정하기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;명 회원가입의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;SignUpView&lt;/code&gt;를 사용하는게 일반적&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;변경된-viewspy회원가입&quot;&gt;변경된 views.py(회원가입)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/9984643f-fa32-4bf5-9140-14f401be48cb/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%92%E1%85%AC%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%80%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B8%20view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;추가 변경사항 - &lt;code class=&quot;highlighter-rouge&quot;&gt;validation&lt;/code&gt;이 먼저 완료되고, 데이터베이스에 접근하도록 수정함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로젝트-urlspy와-앱-urlspy-작성&quot;&gt;프로젝트 urls.py와 앱 urls.py 작성&lt;/h3&gt;

&lt;h4 id=&quot;프로젝트-urlspy&quot;&gt;프로젝트 urls.py&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/edb75e1f-0fa5-4b26-bdd2-74951082725c/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20urls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;앱-urlspy&quot;&gt;앱 urls.py&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/53dd42da-34e9-46cf-876f-ec03359e7b94/%E1%84%8B%E1%85%B1%E1%84%89%E1%85%B3%E1%84%90%E1%85%A1%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%86%B7%20%E1%84%8B%E1%85%A2%E1%86%B8%20urls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">Westagram</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">006. Django - C.R.U.D 2 review</title>
      <link href="http://localhost:4000/006-django" rel="alternate" type="text/html" title="006. Django - C.R.U.D 2 review" />
      <published>2021-04-03T00:00:00+09:00</published>
      <updated>2021-04-03T00:00:00+09:00</updated>
      <id>http://localhost:4000/006-django</id>
      <content type="html" xml:base="http://localhost:4000/006-django">&lt;h2 id=&quot;crud-2-review&quot;&gt;C.R.U.D 2 review&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;C.R.U.D 1 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;를 작성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;migrate&lt;/code&gt;해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;django shell&lt;/code&gt;을 이용해 데이터를 입력하고, 삭제하고, 업데이트 하는 등 조작을 해 봤다&lt;/li&gt;
  &lt;li&gt;C.R.U.D 2 에서는 프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;와 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;를 작성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;를 작성해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;httpie&lt;/code&gt;를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; 온 내용을 처리하는 과정을 학습한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flow&quot;&gt;flow&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;review&lt;/code&gt;에 앞서 흐름에 대해 이해하고 넘어가려한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c6d4f984-c848-4120-ac5d-e7e64d9b2dc5/flow.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;위 그림에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;를 보내면 프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 분류하여 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;로 보내준다, 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;는 여기서 한번 더 분류해서 일치하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;로 보내주게 되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;는 해당 로직을 완수한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modelspy&quot;&gt;models.py&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c91a402b-faf9-4815-af42-973d4573c5b1/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;환경설정과 기초 세팅에 관해서는 생략하고 모델부터 살펴보겠다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Owner&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt;클래스가 있고, 1대다 관계를 형성하고 있는 모델이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;viewspy&quot;&gt;views.py&lt;/h2&gt;

&lt;h3 id=&quot;post&quot;&gt;post&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; 메소드를 처리할 부분을 살펴보겠다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/53fd4d59-bb53-4d1c-8301-7b73ca5b6f7f/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%87%E1%85%B2%E1%84%8B%E1%85%AF%E1%84%82%E1%85%A5.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/b6458e38-4445-44c8-9202-9eeac2f8e267/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%87%E1%85%B2%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;두 클래스의 메소드 이름이 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;인 것에 집중해야 한다&lt;/li&gt;
  &lt;li&gt;프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;로 온 후에 각 뷰에 &lt;code class=&quot;highlighter-rouge&quot;&gt;as_view()&lt;/code&gt;를 적용해 주었다, &lt;code class=&quot;highlighter-rouge&quot;&gt;as_view()&lt;/code&gt; 부분이 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;에 담긴 메소드를 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;안의 클래스 안에 있는 여러 메소드 중 일치하는 메소드의 로직을 따르도록 하는 부분이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get&quot;&gt;get&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; 메소드를 처리할 부분이다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/35d12b23-ba75-47fd-8e9d-abef174f04a2/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%82%E1%85%A5%E1%84%80%E1%85%A6%E1%86%BA.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/bf8bc6cb-dacc-4052-a806-7cdabc06bb67/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3%E1%84%80%E1%85%A6%E1%86%BA.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Owner&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;을 처리할 때, 한번에 정보를 출력하기 위해서 코드를 설계하다보니 많이 지저분한 모습이다&lt;/li&gt;
  &lt;li&gt;이후 C.R.U.D 2 세션에서 더 깔끔한 모습을 봤으니 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;westagram&lt;/code&gt; 과제에서 사용하게 된다면 더 깔끔하게 구현하도록 노력해야겠다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-urlspy&quot;&gt;프로젝트 urls.py&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/1f4c0824-3f8d-4683-bbf4-2f3132b596cc/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%8B%E1%85%B2%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A6%E1%86%AF%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ownerdogs&lt;/code&gt; 부분이 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;로 들어오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;안의 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;로 보내게 처리한 내용이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;앱-urlspy&quot;&gt;앱 urls.py&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/736a8ab2-a53d-4386-9acd-002e88a71bc7/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%8B%E1%85%A2%E1%86%B8%E1%84%8B%E1%85%B2%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A6%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 분류되어 들어와서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/owner&lt;/code&gt; 나 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dog&lt;/code&gt;로 분류되어 원하는 클래스로 분류하는 부분이다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">C.R.U.D 2 review</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">005. Django - model method, 정참조, 역참조</title>
      <link href="http://localhost:4000/005-django" rel="alternate" type="text/html" title="005. Django - model method, 정참조, 역참조" />
      <published>2021-03-31T00:00:00+09:00</published>
      <updated>2021-03-31T00:00:00+09:00</updated>
      <id>http://localhost:4000/005-django</id>
      <content type="html" xml:base="http://localhost:4000/005-django">&lt;h2 id=&quot;queryset&quot;&gt;Queryset&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Queryset&lt;/code&gt;은 전달받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;의 객체 목록을 의미한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt;로부터 데이터를 읽고, 필터를 걸거나 정렬 등을 할 수 있다&lt;/li&gt;
  &lt;li&gt;리스트와 같은 구조를 지니고 있지만, 파이썬 기본 자료구조가 아니기 때문에 읽고, 쓰기 위해서는 자료형 변환을 해줘야 한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Queryset&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt;의 여러 레코드(row)를 나타낸다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;objects&quot;&gt;objects&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/cd58ffbb-1a27-4d1b-ab23-68438e05ffe6/%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%8E%E1%85%A1%E1%86%B7%E1%84%8C%E1%85%A91.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 보이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;objects&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelManager&lt;/code&gt;로 일종의 매니저 역할을 한다고 생각하면 된다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Database&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; 사이에서 의사소통을 할 수 있도록 돕는 역할을 한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Product.objects&lt;/code&gt;를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;objects&lt;/code&gt;라는 이름의 매니저가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Queryset&lt;/code&gt; 형태로 변환시킨다는 뜻이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;model-method&quot;&gt;Model method&lt;/h2&gt;

&lt;h3 id=&quot;methods-that-dont-return-querysets&quot;&gt;Methods That Don’t Return QuerySets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;create()
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;에 데이터를 추가(&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;) 해주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;로, 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;인스턴스&lt;/code&gt;를 반환해준다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/8ca59b94-aaa7-4239-8618-f9be93b1a721/create.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;get()
    &lt;ul&gt;
      &lt;li&gt;지정된 조회 매개 변수와 일치하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;인스턴스&lt;/code&gt;를 반환합니다&lt;/li&gt;
      &lt;li&gt;매개 변수는 필드 조회에 설명된 형식이어야합니다&lt;/li&gt;
      &lt;li&gt;하나의 값만 가능!! 둘 이상이라면 오류 발생
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/61001b22-2042-4e89-940b-380ee5d21def/get.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;update()
    &lt;ul&gt;
      &lt;li&gt;지정된 필드에 대해 업데이트 쿼리를 수행하고 수행한 행 수를 반환&lt;/li&gt;
      &lt;li&gt;일부 행에 이미 업데이트 하려던 값이있는 경우 업데이트 된 행 수와 일치하지 않을 수 있다&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update()&lt;/code&gt;를 사용하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;queryset&lt;/code&gt; 형태에만 적용할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;delete()
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;의 모든 행에 대해 SQL 삭제 쿼리를 수행하고 삭제 된 개체 수와 개체 유형별 삭제 횟수가 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt;를 반환한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;save()
    &lt;ul&gt;
      &lt;li&gt;저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exists()
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;와 함께 사용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 조건에 맞는 데이터가 있는지 조회, 존재하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 존재하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;를 반환한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_or_create()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bulk_create()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;first()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;last()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregate()&lt;/code&gt; 등등(사용해보고 리뷰 올리겠습니다!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods-that-return-querysets&quot;&gt;Methods That Return QuerySets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;all()
    &lt;ul&gt;
      &lt;li&gt;한 테이블의 모든 레코드를 가져오려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;all() method&lt;/code&gt;를 사용한다&lt;/li&gt;
      &lt;li&gt;그 결과로 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 을 반환한다&lt;/li&gt;
      &lt;li&gt;이때, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 안에는 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;인스턴스&lt;/code&gt;가 포함되어 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exclude()
    &lt;ul&gt;
      &lt;li&gt;조건에 맞지 않는 값을 조회&lt;/li&gt;
      &lt;li&gt;IS NOT, NOT IN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;filter()
    &lt;ul&gt;
      &lt;li&gt;한 테이블의 특정 레코드를 가져올 때 사용&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter() method&lt;/code&gt;는 가장 자주 사용하는 기능&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter(**kwargs)&lt;/code&gt; : 키워드 인자로 주어진 조건에 일치하는 레코드들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;을 반환한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;values()
    &lt;ul&gt;
      &lt;li&gt;쿼리셋의 값을 딕셔너리 형태로 반환한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/ad3ad797-e731-4e71-aac2-129cdbc8afb6/vlaues.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;values_list()
    &lt;ul&gt;
      &lt;li&gt;쿼리셋의 값을 튜플 형태로 반환한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/5987791f-374f-4581-9ffb-a11ea3529c2f/values_list.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;manytomany-field&quot;&gt;ManytoMany field&lt;/h2&gt;

&lt;h3 id=&quot;foreignkey-field로-이어주는-것과-차이점&quot;&gt;Foreignkey Field로 이어주는 것과 차이점&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/52654c86-a6e0-40ba-86ba-c96aaa89d1ba/%E1%84%83%E1%85%A1%E1%84%83%E1%85%A2%E1%84%83%E1%85%A1%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중간 테이블 &lt;code class=&quot;highlighter-rouge&quot;&gt;AllergyDrink&lt;/code&gt;를 만들어주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Allergy&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;로 연결해줘도 사실 문제는 없다&lt;/li&gt;
  &lt;li&gt;그런데 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ManytoMany field&lt;/code&gt;로 설정해주는 이유는 뭘까?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;데이터를 삽입할 때 차이 (create)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Allergy&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;ManytoMany&lt;/code&gt;로 연결해준 경우에는 굳이 ` AllergyDrink&lt;code class=&quot;highlighter-rouge&quot;&gt;를 거치지 않고 &lt;/code&gt;Product&lt;code class=&quot;highlighter-rouge&quot;&gt;를 통해 바로 &lt;/code&gt;Allery`에 접근 할 수 있다&lt;/li&gt;
  &lt;li&gt;만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;AllergyDrink&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Allergy&lt;/code&gt;를 연결해주면 데이터 추가할때 항상 중간테이블을 거쳐야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;데이터를 불러올 때 차이 (get)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Many to Many&lt;/code&gt;로 연결한 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Allergy&lt;/code&gt; 정보(&lt;strong&gt;정참조&lt;/strong&gt;)를 바로 가져올 수도 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Allergy&lt;/code&gt;에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;정보(&lt;strong&gt;역참조&lt;/strong&gt;, 장고에서 붙여준 매니저 &lt;code class=&quot;highlighter-rouge&quot;&gt;_set&lt;/code&gt;을 통해)를 바로 가져올 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정참조&quot;&gt;정참조&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;products.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'콜드 브루'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'콜드 브루'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# mtm 관계, 정참조라서 바로 접근해서 가져오는 모습&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Allergy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Allergy&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'우유'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'우유'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'대두'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'우유'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'난류'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'대두'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'우유'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'난류'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;대두&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;우유&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;난류&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;밀&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;역참조&quot;&gt;역참조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;related name&lt;/code&gt;을 설정해주지 않았으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_set&lt;/code&gt;이 붙으면 역참조 데이터임을 알 수 있다&lt;/li&gt;
  &lt;li&gt;하지만 함부로 설정했을 경우, 역참조를 도와주는 매니저인지 모를 경우가 있을 수도 있으니, 초창기에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_set&lt;/code&gt;인 상황에서 익숙해지는 걸 추천&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_set&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;related_descriptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_reverse_many_to_one_manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RelatedManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fa3cfe7a5e0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;나이트로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;바닐라&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;크림&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;나이트로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;쇼콜라&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;클라우드&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'나이트로 쇼콜라 클라우드'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'나이트로 바닐라 크림'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'딸기 요거트 블렌디드'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'트리플 미니 스콘'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'보니밤 몽블랑 데니쉬'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀당 에그 타르트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀당 초코 타르트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Allergy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'나이트로 쇼콜라 클라우드'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'나이트로 바닐라 크림'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'딸기 요거트 블렌디드'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'트리플 미니 스콘'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'보니밤 몽블랑 데니쉬'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀당 에그 타르트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'밀당 초코 타르트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'category_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;나이트로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;쇼콜라&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;클라우드&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;나이트로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;바닐라&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;크림&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;딸기&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;요거트&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;블렌디드&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;트리플&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;미니&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;스콘&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;보니밤&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;몽블랑&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;데니쉬&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;밀당&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;에그&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;타르트&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;밀당&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;초코&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;타르트&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">Queryset</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">022. 시저 암호</title>
      <link href="http://localhost:4000/022-algorithm" rel="alternate" type="text/html" title="022. 시저 암호" />
      <published>2021-03-29T00:00:00+09:00</published>
      <updated>2021-03-29T00:00:00+09:00</updated>
      <id>http://localhost:4000/022-algorithm</id>
      <content type="html" xml:base="http://localhost:4000/022-algorithm">&lt;h2 id=&quot;question&quot;&gt;Question&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/db884de3-b4e4-4243-b0bd-964cce5b947f/%E1%84%89%E1%85%B5%E1%84%8C%E1%85%A5%E1%84%8B%E1%85%A1%E1%86%B7%E1%84%92%E1%85%A9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;내-풀이정답&quot;&gt;내 풀이(정답)&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ZYXWVUTSRQPONMLKJIHGFEDCBA&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;대문자와 소문자의 리스트를 가지고 밀어낼 값을 알 수 있도록 대문자 리스트와 소문자 리스트를 만들었다&lt;/li&gt;
  &lt;li&gt;리스트를 만들 때, 알파벳 역순으로 만들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 값을 더해줄 때, 따로 계산해 줄 필요가 없기 때문에 역순으로 만들었다
    &lt;ul&gt;
      &lt;li&gt;예시) a의 인덱스 값은 -1 이므로 n이 1일경우 -1 + 1 = 0으로 자연스럽게 인덱스 0인 z값을 출력하게 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;의 값을 비교하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;가 공백일 경우, 문자열 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;에 추가만 해주고 넘어가고, &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;의 경우에서 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;로 대문자일 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;big&lt;/code&gt; 리스트에서 진행 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;small&lt;/code&gt; 리스트에서 진행되도록 구현했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다른-풀이&quot;&gt;다른 풀이&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caesar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;완전히 새로운 방식이라서 가져온 코드, 추후 분석해서 리뷰하겠습니다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">Question</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">004. Django - C.R.U.D 1 review</title>
      <link href="http://localhost:4000/004-django" rel="alternate" type="text/html" title="004. Django - C.R.U.D 1 review" />
      <published>2021-03-29T00:00:00+09:00</published>
      <updated>2021-03-29T00:00:00+09:00</updated>
      <id>http://localhost:4000/004-django</id>
      <content type="html" xml:base="http://localhost:4000/004-django">&lt;h2 id=&quot;django-crud-1-review&quot;&gt;Django C.R.U.D 1 review&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Assignment
    &lt;ul&gt;
      &lt;li&gt;저번에 팀으로 스타벅스 모델링을 진행한 것을 바탕으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; 모델을 완성하는 작업
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/fa1e9a78-5e80-4f94-a3c5-32a947bb5bb1/modeling.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모델링을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;menu&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;category&lt;/code&gt;가 서로 1 대 다 관계이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;category&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;drinks&lt;/code&gt; 또한 1 대 다 관계인 것을 확인했다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;field type&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;를 다의 위치에 있는 테이블에 명시하고, 1의 관계인 테이블을 연결해서 구현할 수 있었다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/edad700f-5329-4b6d-b705-9675622e7661/1%E1%84%83%E1%85%A2%E1%84%83%E1%85%A1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;결과물 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;drinks&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; 또한 같은 방식으로 구현함&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drinks&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;allergy&lt;/code&gt; 테이블의 관계는 다 대 다 관계인 것을 확인&lt;/li&gt;
  &lt;li&gt;다 대 다 관계를 구현하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; docs를 찾았고, &lt;code class=&quot;highlighter-rouge&quot;&gt;ManytoMany&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;를 확인함
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/d189b858-256a-4391-91db-e3e45dd3eaa6/%E1%84%83%E1%85%A1%E1%84%83%E1%85%A2%E1%84%83%E1%85%A1%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ManytoMany&lt;/code&gt; 필드를 관계를 가진 테이블끼리 설정하면, 중간 테이블이 자동으로 생성된다&lt;/li&gt;
  &lt;li&gt;나는 내가 원하는 테이블을 중간 테이블로 지정하고 싶어서 좀 더 찾아보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;through&lt;/code&gt;를 사용해, 내가 원하는 테이블로 지정할 수 있는 것을 찾아냄&lt;/li&gt;
  &lt;li&gt;위 사진처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;ManytoMany&lt;/code&gt;로 관계를 설정하고, 중간 테이블에 연결된 외래키를 설정해서 구현&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py shell&lt;/code&gt;을 통해서 테이블에 값을 입력해서 과제 제출
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/805331fd-50fe-43f3-ba2a-cb75ffa92492/menu.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/fff759ee-178c-4236-8ba2-f240b7430e36/category.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/bbe69a3e-9d95-4c23-b340-97a07afed3ea/product.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/92ada7d2-cde2-46ad-a762-d2a02e50409f/allergy.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c1d78a4d-cea7-41e1-9942-68863b14f480/allergydrink.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/3e4097a0-a48b-44d6-a78e-87d7c97db54a/image.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html">Django C.R.U.D 1 review</summary>
      

      
      
    </entry>
  
</feed>
