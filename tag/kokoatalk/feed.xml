<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/kokoatalk/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-04-03T12:56:55+09:00</updated>
  <id>http://localhost:4000/tag/kokoatalk/feed.xml</id>

  
  
  

  
    <title type="html">Hiyee Blog | </title>
  

  
    <subtitle>Developer with good Influence</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">003. 코코아톡 클론 마지막 글</title>
      <link href="http://localhost:4000/003-kokoa" rel="alternate" type="text/html" title="003. 코코아톡 클론 마지막 글" />
      <published>2021-02-22T00:00:00+09:00</published>
      <updated>2021-02-22T00:00:00+09:00</updated>
      <id>http://localhost:4000/003-kokoa</id>
      <content type="html" xml:base="http://localhost:4000/003-kokoa">&lt;h3 id=&quot;kokoa-talk-clone-종료&quot;&gt;kokoa talk clone 종료&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;정해진 기간에 코코아톡 과정을 끝마치기 위해 고생하긴 했지만 우선 과정을 무사히 끝냈다. 그 과정에서 새로 배운 내용들을 정리하는 글이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 둘 다 CSS를 적용하거나 다른 목적으로 대상을 지정하는 용도로 사용한다고 이론에서 배웠다. 물론 이론대로 둘 다 사용할 수 있지만, 코코아톡 클론을 만들면서 처음에 두 방식을 다 사용해 보니, &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;를 사용하는 방법은 나중에 태그들에 공통적인 효과를 적용시킬 때 많이 복잡했고, 수정하려 해도 작성자마저 헷갈리는 코드가 만들어졌다.&lt;br /&gt;
따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;BEM(Block Element Modifyer)&lt;/code&gt;을 사용하는 실무자들이 많다는 것을 알게 되었고, 후반 프로젝트에서는 이 방식으로만 작업했다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.btn 뒤에 내용을 나타내는 단어&lt;/code&gt;: 개발자들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;인지 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;인지 헷갈려 CSS와 HTML을 왔다갔다 하는 것을 방지하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;로만 코드를 짜기 위해 정한 규칙.&lt;/li&gt;
  &lt;li&gt;코드를 읽기 쉽다는 특징을 가지고 있음.&lt;/li&gt;
  &lt;li&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 부분이 길어질 수 있다는 단점을 가지고 있다.&lt;/li&gt;
  &lt;li&gt;무엇보다 이름 짓기가 너무 고민된다…;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;아직도-헷갈려서-더-공부해야-하는-것&quot;&gt;아직도 헷갈려서 더 공부해야 하는 것&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;에 대해서 더 공부해야 한다. 특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;position:fixed&lt;/code&gt;에 대해서 더 공부해야 겠다. 원리는 이해했고, 부모 태그를 찾는 것도 어느정도 익숙해졌지만, 문제는 이 코드를 적용하면 기존 css 적용이 풀리면서 엉망진창이 된다. 코코아톡 클론 프로젝트에서 과제로 나온 몇몇 부분에서 이 부분때문에 엄청 고생했다. 덕분에 시간을 이틀정도 더 쓴 듯 하다. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kokoa-talk-clone&quot;&gt;Kokoa talk clone&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;최종본 &lt;a href=&quot;https://github.com/hiyee-gj/Kokoa-clone-2021&quot;&gt;https://github.com/hiyee-gj/Kokoa-clone-2021&lt;/a&gt;
깃허브 Repository다. 우측 사이드바를 통하면 최종본을 볼 수 있다. 화면 사이즈 제한을 걸어두었으니 웹 페이지 크기를 줄여야 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;힘들었지만 어찌저찌 완성했다. 완성하고 보니 더 적용하고 싶은 것도 많고 부족한 점도 많이 보인다. 파이썬 학습에 우선 열중하고 후에 시간이 난다면 지속적으로 고쳐나갈 예정이다. 주말동안 지킬기반 블로그를 생성하려고 시간을 보냈는데 결과는 실패로 돌아갔다. 후…. 이것도 성공한다면 블로그에 올리도록 하겠습니다….🥲&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="kokoatalk" />
      

      
        <summary type="html">kokoa talk clone 종료</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">002. transition, transform, animation, media query 학습내용</title>
      <link href="http://localhost:4000/002-kokoa" rel="alternate" type="text/html" title="002. transition, transform, animation, media query 학습내용" />
      <published>2021-02-18T00:00:00+09:00</published>
      <updated>2021-02-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/002-kokoa</id>
      <content type="html" xml:base="http://localhost:4000/002-kokoa">&lt;h3 id=&quot;transition&quot;&gt;Transition&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt;에 있어야 함.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linear&lt;/code&gt;: 직선으로 움직이게 해줌(균등한 속도)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ease-in-out&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ease-in&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ease-out&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt; 속도를 구간마다 다르게 조절하게 해줌.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;transform&quot;&gt;Transform&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scale&lt;/code&gt;: 이미지 크기 변형&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rotate&lt;/code&gt;: 이미지 기준 축에 맞춰 회전&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;등 box의 요소를 변형시키지 않고, 움직이게 함. -&lt;code class=&quot;highlighter-rouge&quot;&gt;skew&lt;/code&gt;: 비스듬히 기울이기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt; 등과 조합해서 사용할 수 있음.(&lt;strong&gt;‼️주의 &lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;에 입력하면 그 상태를 벗어나면 작동하지 않음. 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt;에 적용할 것!!&lt;/strong&gt;)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;animation&quot;&gt;Animation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes name{from{transform:값}to{transform:값}}&lt;/code&gt;: 입력해 놓은 값의 효과를 실행한 다음 다시 처음 위치로 이동하게 됨.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes name{0%{transform:값}50%{transform:값}100%{transform:값}}&lt;/code&gt;: 제자리로 돌아오는 것도 애니메이션화 시킬 수 있음.&lt;/li&gt;
  &lt;li&gt;애니메이션 단계는 제한 없이 계속할 수 있음.&lt;/li&gt;
  &lt;li&gt;애니메이션으로 안되는 것도 있으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt; 조합으로 하는 것을 추천.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;media-query&quot;&gt;Media query&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CSS만을 이용해서 스크린의 사이즈를 알 수 있는 방법.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@media screen and (min-width, max-width 등: Npx){}&lt;/code&gt;: 스크린의 사이즈에 따라 효과를 적용시킬 수 있음.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="kokoatalk" />
      

      
        <summary type="html">Transition</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">001. Kokoatalk</title>
      <link href="http://localhost:4000/001-kokoa" rel="alternate" type="text/html" title="001. Kokoatalk" />
      <published>2021-02-18T00:00:00+09:00</published>
      <updated>2021-02-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/001-kokoa</id>
      <content type="html" xml:base="http://localhost:4000/001-kokoa">&lt;h4 id=&quot;pseudo-selector&quot;&gt;Pseudo Selector&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;tag들에 id나 class를 부여하지 않고, css에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;div:first child{}&lt;/code&gt;와 같은 형태로 부분 적용시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;span:nth-child(){}&lt;/code&gt;와 같은 형태로 사용할 수 있으며, 적용시킬 상대가 많아지면 각각 child에 코드를 사용하지 않고, &lt;code class=&quot;highlighter-rouge&quot;&gt;even&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;odd&lt;/code&gt;와 같이 짝수 홀수 형태로 적용시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;응용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;2n, 2n+1, 3n+1&lt;/code&gt;등의 수식을 통해 규칙적으로 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그::placeholder{효과}&lt;/code&gt;를 통해 입력되는 텍스트는 제외하고&lt;strong&gt;palceholder&lt;/strong&gt;에만 효과를 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그::selection{효과}&lt;/code&gt;를 통해 선택되는 txt에만 효과를 적용할 수 있다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;attribute-selector&quot;&gt;Attribute Selector&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그[속성=&quot;속성값&quot;] {}&lt;/code&gt;의 형식을 통해 효과를 적용할 대상을 특정할 수 있음.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그[속성~=&quot;속성값 중 일부&quot;] {}&lt;/code&gt;의 형식을 사용하면 속성값 중 일부 내용을 공통으로 하는 대상들을 한번에 효과를 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;이 외에도 속성값의 끝부분($), 첫부분(^)을 특정하거나 접두사 접미사를 특정하는 등 selector지정 형식이 많으니 필요시 &lt;code class=&quot;highlighter-rouge&quot;&gt;attribute selector mdn&lt;/code&gt;의 검색을 통해 알아보는 것이 좋겠다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;combinator&quot;&gt;Combinator&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CSS를 적용할 때, 태그명에 효과를 부여하면 같은 태그명을 가진 태그들은 모두 적용을 받게 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;를 부여하면 같은 태그명이라도 각각 효과를 줄 수 있지만 코드가 복잡해지고 깨끗한 코드라고 볼 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;부모태그 자식태그&lt;/code&gt; 형식을 통해 부모태그 안의 자식태그에만 효과를 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;부모태그 &amp;gt; 자식태그&lt;/code&gt; 형식을 통해 부모태그 &lt;strong&gt;바로 아래&lt;/strong&gt; 자식태그에만 효과를 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그 + 태그&lt;/code&gt; 형식을 통해 태그 안이 아닌 &lt;strong&gt;바로 다음에&lt;/strong&gt; 오늘 태그에만 효과를 줄 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그 + 태그&lt;/code&gt;형식에서 &lt;strong&gt;바로 다음에&lt;/strong&gt; 오는 형제 태그가 아닌 경우 적용이 되지 않는다. 이럴 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;태그 ~ 태그&lt;/code&gt;형식을 사용하면 바로 다음에 오는 형제 태그가 아니더라도 적용할 수 있다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;state&quot;&gt;State&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그:active&lt;/code&gt; : 태그가 클릭 된 상태에서 효과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그:hover&lt;/code&gt; : 태그에 마우스 포인터가 올라간 상태에서 효과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그:focus&lt;/code&gt; : 태그에 키보드로 선택되었을 때 효과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그:visited&lt;/code&gt; : 링크를 방문하고 나서 효과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그:focus-within&lt;/code&gt; : 자식 태그 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;focus&lt;/code&gt;된 상태에서 효과&lt;/li&gt;
  &lt;li&gt;다른 element와 연계시킬 수 있음 : &lt;code class=&quot;highlighter-rouge&quot;&gt;부모태그:state 자식태그{효과}&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;부모태그:state 자식태그:state {효과}&lt;/code&gt; 등으로 연계 가능&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="kokoatalk" />
      

      
        <summary type="html">Pseudo Selector</summary>
      

      
      
    </entry>
  
</feed>
