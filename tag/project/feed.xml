<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/project/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-04-18T18:08:00+09:00</updated>
  <id>http://localhost:4000/tag/project/feed.xml</id>

  
  
  

  
    <title type="html">Hiyee Blog | </title>
  

  
    <subtitle>Developer with good Influence</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">003. Project - gi &amp;amp; github, products view</title>
      <link href="http://localhost:4000/003-project" rel="alternate" type="text/html" title="003. Project - gi &amp; github, products view" />
      <published>2021-04-18T00:00:00+09:00</published>
      <updated>2021-04-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/003-project</id>
      <content type="html" xml:base="http://localhost:4000/003-project">&lt;h2 id=&quot;git--github&quot;&gt;Git &amp;amp; Github&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에는 많은 기능들이 있고, 더 어려운 기능들도 많다고 한다 이번 프로젝트를 진행하면서, &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;에 대해서 고통받는 부분이 많아서 따로 설명을 추가적으로 듣게 되었다. 그 내용에 대해서 정리하는 글이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;순서&quot;&gt;순서&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트가 시작되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;가 생성되었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; 받아서 초기세팅을 완료했고, &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에도 반영해주었다&lt;/li&gt;
  &lt;li&gt;초기세팅이 완료되고, 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt;을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과 같은 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;을 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;에 저장했다&lt;/li&gt;
  &lt;li&gt;나는 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에서 내가 담당하는 기능의 이름을 지닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature/기능&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;를 하나 생성했고, 그 안에서 작업을 계속 했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;생겼던-의문&quot;&gt;생겼던 의문&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;각각 처음은 같은 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에서 시작했지만, 작업하다보면 각자 속도도 다를 것이기 때문에 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;된 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;된다면, 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;이 달라지는 점에서 의문이 들었다
    &lt;ul&gt;
      &lt;li&gt;이런 상황을 해결하기 위해(협업을 위해) &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;된 새로운 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;이 존재한다면, 나는 작업이 끝난후 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;에서 우선, &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 단계만 실시한다(log에는 commit 내용이 보일 것임)&lt;/li&gt;
      &lt;li&gt;그 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;으로 다시 갈아끼운다(내 &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;에 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;임 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;의 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;과는 다름)&lt;/li&gt;
      &lt;li&gt;그럼 내 상태는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;이고, 이 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;에 있는 새로운 버전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;main branch&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;해와서 버전을 일치시킨다&lt;/li&gt;
      &lt;li&gt;그 후 다시 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;(featur/기능)으로 갈아끼운 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여기까지가 기본적인 흐름이고, 아주 기초적인 내용이라고 한다……나중에 더 어려운게 있다고 하니 그 때 다시 한번 정리하도록 하겠다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;products-view&quot;&gt;Products View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/0c4c810e-783b-4e4e-986b-8fd97467986a/%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;처음에는 막막하게 시작했지만, 작성하다보니 모든 기능을 한번에 구현하려는 욕심을 버리는 것이 오히려 좋은 시작단추가 되었다&lt;/li&gt;
  &lt;li&gt;우선 큰 틀을 닦아놓은 후, 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;mainview&lt;/code&gt;에서라면 우선 모든 상품을 보여주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;를 작성한 후, 조건들을 추가해 나갔다&lt;/li&gt;
  &lt;li&gt;중간 쯤 보이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;list comprehension&lt;/code&gt;은 코드의 길이도 줄여주지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;for문&lt;/code&gt;보다 무려 2배가 빠르다고 한다. 우선 내 실력이 되는 부분은 간단한 부분의 &lt;code class=&quot;highlighter-rouge&quot;&gt;list comprehension&lt;/code&gt;이었지만, 피드백 후 바꿀 수 있는 부분에 대해선 고민해 보려 한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/fd7ea9be-ba46-4eaf-81a4-a9c7e1ea5d5e/%E1%84%8F%E1%85%A1%E1%84%90%E1%85%A6%E1%84%80%E1%85%A9%E1%84%85%E1%85%B5%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt;되는 창에 카테고리를 표시해 줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;에 비해서 어려운 부분이 없었다. 지금 글을 쓰면서 보니, &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt; 부분은 필요없는 부분 같아서 제거했다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c8999ae2-6208-4818-852c-c942432f40d2/%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%20%E1%84%87%E1%85%B2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;내게 고통을 선사한 검색 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;서로 다른 테이블의 조건들을 한번에 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;해야 하는 부분에서 정말 많이 고민했고, 실패했고, 점점 더 복잡해져가는 찰나 &lt;code class=&quot;highlighter-rouge&quot;&gt;django shell&lt;/code&gt;에서 여러 관계를 뒤적거린 후 한숨을 쉬게된 작업이었다&lt;/li&gt;
  &lt;li&gt;생각보다 쉽게 불어올 수 있는 방법이 있었고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt;라는 모듈의 갓갓 기능도 한 몫 해줬다&lt;/li&gt;
  &lt;li&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;부터는 굳이 하나의 값이 들어있는 리스트라면 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;화 된 상태로 &lt;code class=&quot;highlighter-rouge&quot;&gt;reponse&lt;/code&gt;하지 않고, 프론트엔드에서 좀 더 포장을 뜯기 쉽게 객체로 불러와서 보내는 여유를 가지고?? 작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;이다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">Git &amp;amp; Github</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">002. Project - pagination, path variable, query parameter</title>
      <link href="http://localhost:4000/002-project" rel="alternate" type="text/html" title="002. Project - pagination, path variable, query parameter" />
      <published>2021-04-18T00:00:00+09:00</published>
      <updated>2021-04-18T00:00:00+09:00</updated>
      <id>http://localhost:4000/002-project</id>
      <content type="html" xml:base="http://localhost:4000/002-project">&lt;h2 id=&quot;pagination&quot;&gt;Pagination&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 한 화면에서 얼마나 보여줄 지 정하는 것을 말한다&lt;/li&gt;
  &lt;li&gt;이 과정에서 어떤 방식으로 페이지를 나눌지 담당 프론트엔드 개발자와 협의가 필요하다&lt;/li&gt;
  &lt;li&gt;흔히 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;으로 기능 구현하는데, 이 방식이 좀 더 manual한 방법이라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;는 이 기능을 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator&lt;/code&gt;라는 모듈이 존재한다&lt;/li&gt;
  &lt;li&gt;하지만, 이번 프로젝트에서는 최대한 장고가 제공하는 편의 기능들에 해당하는 수동적인 메커니즘이 있다면, 공부를 위해 잠시 장고의 모듈은 배제하기로 결심했기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator&lt;/code&gt;에 대해서는 구글링을 통해 알아보기 바란다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;원리&quot;&gt;원리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt;의 원리는 놀랍도록 간단하다&lt;/li&gt;
  &lt;li&gt;백엔드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;할 내용이 담긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;라는 리스트가 있다고 한다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;pagination&lt;/code&gt;은 일정한 기준을 가지고, 이 리스트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt; 처리하는 것이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RESULT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;생각보다 구현은 어렵지 않았다. 다만 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 정할 때, 각 페이지에 보여주고 싶은 객체의 수를 정하고, 프론트에서 계산을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 보내줄지, 백엔드에서 계산을 통해 보내줄지 정해야 하는 부분이 더 고민되는 부분이었다
    &lt;ul&gt;
      &lt;li&gt;우리 팀은 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parmeter&lt;/code&gt;에 담기는 의미가 좀 더 직관적인 것을 선호 해서 프론트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;에 값을 담아 주면, 백엔드에서 계산을 통해 되돌려 주는 방식을 택했다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/944baa46-5416-4c51-99ad-fe6b4179162a/%E1%84%91%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;에 값이 들어 오면, 한 페이지에 보여주고 싶은 객체 수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;page_size&lt;/code&gt;를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt;을 계산해주고, 그 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt;해서 보내주는 방식이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;path-variable-vs-query-parameter&quot;&gt;path variable vs query parameter&lt;/h2&gt;

&lt;h3 id=&quot;endpoint&quot;&gt;Endpoint&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENDPOINT&lt;/code&gt;란 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;가 서버에서 리소스에 접근할 수 있도록 가능하게 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 프로그램이 기능할 수 있게 명령을 정리하고, 명령을 받으면 응용프로그램과 상호작용하여 요청된 명령에 대한 값을 전달해준다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 프로그램들이 서로 상호작용하는 것을 도와주는 매개체로 볼 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;api의-역할&quot;&gt;API의 역할&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 서버와 데이터베이스에 대한 출입구 역할을 한다
    &lt;ul&gt;
      &lt;li&gt;데이터베이스에는 소중한 정보들이 저장되는데, 모든 사람들이 이 데이터베이스에 접근할 수 있으면 보안에 문제가 생길 것이다 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;는 이를 방지하기 위해 서버와 데이터베이스에 대한 출입구 역할을 하며, 허용된 사람들에게만 접근성을 부여해 주는 역할을 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;path-vs-query&quot;&gt;path vs query&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt;를 구성하다보면, 같은 맥락인데 보여주고 싶은 내용이 다를 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;예를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;들면&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;로 주로 표현하는 이유가 뭘까? 답은 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;에는 하나의 객체가 아닌 여러 객체들로 이뤄져 있기 때문이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상품을 보여주는 커머스 사이트를 예로 들어보자. 모든 상품을 보여주고 싶은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/products&lt;/code&gt;를 엔드포인트로 갖는 페이지가 있는 반면, 한 상품의 상세 내용을 보여주고 싶은 경우도 있다&lt;/li&gt;
  &lt;li&gt;이 경우에 보여주는 방법에 대해서 어떻게 표현할 것인가? 이 표현 방법이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;path variable&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;의 방식이 존재하는 것이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 이 두가지 방식 중 어떤 방식을 어떤 상황에 주로 사용하는지 정리해 보겠다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;흔히 두 방식 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;가 달라지면, &lt;code class=&quot;highlighter-rouge&quot;&gt;path variable&lt;/code&gt;을 사용하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;의 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;query parameter&lt;/code&gt;를 사용한다고 말한다&lt;/li&gt;
  &lt;li&gt;원리를 살펴보자면, 우선 어떤 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;를 식별해야하는 상황을 생각해보자
    &lt;ul&gt;
      &lt;li&gt;쿼리의 경우, 서버에서는 어느 방식으로 넘어오던지 간에 받아온 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;의 정해진 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;로 쿼리를 날리게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Query Parameter&lt;/code&gt;는 서버로 데이터가 넘어가고 쿼리를 날리며 해당하는 데이터가 없을 경우 따로 에러 핸들링을 해줘야 하는 번거로움이 존재한다&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Path Variable&lt;/code&gt;은 저 경로의 존재하는 페이지가 없으므로 404 에러를 발생한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource&lt;/code&gt;를 식별해야하는 상황에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Path Variable&lt;/code&gt;가 더 적합하다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;당연히 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 되는 값이 없다고 404를 띄울 수 없기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;의 방식이 더 유연할 것이다(빈 리스트를 보여줄 것이므로)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">Pagination</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">001. Project - 초기세팅, mysqldump, django seed</title>
      <link href="http://localhost:4000/001-project" rel="alternate" type="text/html" title="001. Project - 초기세팅, mysqldump, django seed" />
      <published>2021-04-14T00:00:00+09:00</published>
      <updated>2021-04-14T00:00:00+09:00</updated>
      <id>http://localhost:4000/001-project</id>
      <content type="html" xml:base="http://localhost:4000/001-project">&lt;h2 id=&quot;projectgreatingdor&quot;&gt;project(greatingdor)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;greatingmall clone coding&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;초기세팅&quot;&gt;초기세팅&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; 프로젝트를 생성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;my_settings&lt;/code&gt; 설정과 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; 제거&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 파일이 프로젝트 폴더 안에 생성 되게 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;백엔드 팀과 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit massage convention 정하기&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;feat&lt;/code&gt;: 새로운 기능 추가
&lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt;: 버그 수정
&lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;: 문서 수정
&lt;code class=&quot;highlighter-rouge&quot;&gt;refactor&lt;/code&gt;: 코드 리팩토링
&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;: 코드 포맷팅(코드변경없음)
&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;: 테스트 코드 작성
&lt;code class=&quot;highlighter-rouge&quot;&gt;chore&lt;/code&gt;: 소스코드를 건들지 않는 작업
&lt;code class=&quot;highlighter-rouge&quot;&gt;git 컨벤션 형태&lt;/code&gt; : [#이슈번호] 종류: 제목
예시 - &lt;code class=&quot;highlighter-rouge&quot;&gt;[#1] Chore: 프로젝트 초기 세팅 (edited) &lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mysqldump&quot;&gt;mysqldump&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;djagno&lt;/code&gt;에서 프로젝트를 하다보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;에서 수정사항이 생기는 경우가 많다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;를 수정하고 적용하려고 보면, 데이터베이스가 꼬이거나 제대로 적용이 안되는 경우 또한 빈번히 발생한다&lt;/li&gt;
  &lt;li&gt;더미 데이터의 경우 이 글 다음에 오는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;를 사용하면 되지만, 중요한 데이터의 경우 저장해 놓는 편이 안전하고, 또 저장한 데이터를 불러와서 데이터베이스를 다시 구성한다면, 복구하는데 걸리는 시간 또한 적게 들어간다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;의 대표적인 백업 프로그램으로 스토리지 엔진에 상관없이 백업을 받을 수 있는 도구이다(물리적인 데이터 복사가 아닌 Logical 백업 도구임), 내가 저장하려는 데이터베이스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; 형태로 저장하는 도구이다&lt;/li&gt;
  &lt;li&gt;사용법에 대해서는 더 다양한 사용법이 존재하지만, 여기서는 전체 데이터베이스를 저장하고, 다시 복구하는 사용법만 기록한다, 테이블 단위나, 더 세세한 적용법에 대해서는 구글링을 해보길 바란다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;데이터가 저장되길 원하는 장소에서 명령문을 실행해도 되고, 경로를 지정할 수도 있지만 주로 원하는 곳에서 실행하는 것 같다&lt;/li&gt;
  &lt;li&gt;명령어를 입력할 때, 어려운 부분은 없지만 괄호의 방향을 헷갈리면, 데이터베이스를 손상시킬 수 있기 때문에 신경써 주는 것이 좋다&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Export:

1. 데이터베이스 전체를 추출할 경우
mysqldump -u 아이디 -p -A &amp;gt; 파일이름.sql

2. 특정 DB를 백업하는 경우(주로 사용)
mysqldump -u 아이디 -p DB명 &amp;gt; 파일이름.sql

Import:

1. mysql -u root -p &amp;lt; 파일이름.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/7a3d021e-9bc5-48d2-a37d-03060575fc64/%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3%20%E1%84%8C%E1%85%B5%E1%84%8B%E1%85%AE%E1%84%80%E1%85%B5%20%E1%84%8C%E1%85%A5%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 지우기 전의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;의 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e88ac0d1-44d3-4fd6-8879-1a6f1feade0d/%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%8B%E1%85%B1%E1%84%8E%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; 파일을 저장할 위치로 이동한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/83f4f588-7f29-4b72-8a05-d20c404b553a/sql%20%E1%84%8C%E1%85%A5%E1%84%8C%E1%85%A1%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;를 저장하는 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/c9915c55-4bb4-42c2-98dd-5204afb8e045/import%20%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;를 다시 복구하는 과정&lt;/li&gt;
  &lt;li&gt;여기서 삭제한 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;를 데이터베이스에 다시 생성해 논 상태이다(데이터베이스에는 새롭게 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt;가 비어있는 상태로 존재하고 있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e59670df-8813-4a17-90f0-eb2700b09205/%E1%84%83%E1%85%A9%E1%84%80%E1%85%B3%20%E1%84%8C%E1%85%B5%E1%84%8B%E1%85%AE%E1%84%80%E1%85%B5%20%E1%84%8C%E1%85%A5%E1%86%AB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다시 복구된 데이터 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/9eda581f-f4ca-4dc1-9bf4-da00424467d4/%E1%84%82%E1%85%A2%E1%84%87%E1%85%AE%20%E1%84%90%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%87%E1%85%B3%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;내부의 테이블과 데이터까지 모두 살아있는 모습&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;django-seed&quot;&gt;django seed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트를 하다보면 백엔드에서 테스트를 진행할 더미 데이터가 필요하게 된다&lt;/li&gt;
  &lt;li&gt;직접 입력해서 데이터를 구성하는 것도 좋지만, 위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt;에서 설명한 경우가 발생할 때마다 또다시 데이터를 쌓는 작업은 피로하고, 비효율적인 작업처럼 느껴진다&lt;/li&gt;
  &lt;li&gt;이럴 경우 활용 가능한 것이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Django Seed&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;이다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;라는 라이브러리 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Django seed&lt;/code&gt;가 존재하기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;만 설치한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;faker&lt;/code&gt; 또한 사용할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;또한 각 모델에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;OneToOneField&lt;/code&gt;냐, &lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;냐, &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKeyField&lt;/code&gt;냐에 따라 작성하는 코드가 조금씩 달라진다(&lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 관한 문제인데, 이 내용은 구글링을 통해서 찾아서 해결하길 바란다, 이 글은 기본적인 기능에 대한 정리)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;설치
pip install django-seed&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;는 기본적으로 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;의 필드를 보고 생성해주어야 할 더미 데이터에 대해서 판단한다
    &lt;ul&gt;
      &lt;li&gt;예를 들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Emailfield&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Charfield&lt;/code&gt;와 크게 다를 점이 없어서 사용하지 않았지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;로 인식해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; 형식으로 출력해 준다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Seed&lt;/code&gt; 파일을 생성할 때는 내가 적용하고자 하는 앱의 하위에 생성해 줘야 한다
    &lt;blockquote&gt;
      &lt;p&gt;원하는 앱 안으로 이동 후
mkdir management
cd management
mkdir commands
touch &lt;strong&gt;init&lt;/strong&gt;.py commands/&lt;strong&gt;init&lt;/strong&gt;.py commands/seed_users.py&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/adaa2adf-0221-405b-880c-bd6324a91e45/%E1%84%8B%E1%85%B2%E1%84%8C%E1%85%A5%20%E1%84%80%E1%85%A7%E1%86%BC%E1%84%85%E1%85%A9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;적용하고자 하는 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;management&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; 생성한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/9c23aa8f-4574-404f-bde6-e480c2865654/%E1%84%8C%E1%85%A1%E1%86%BC%E1%84%80%E1%85%A9%20%E1%84%8B%E1%85%B5%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%91%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;작성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;의 내용이다, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Seed&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt;를 불러왔다&lt;/li&gt;
  &lt;li&gt;위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;argument&lt;/code&gt; 부분은 옵션의 기능이라고 생각하면 된다(생략해도 되는 부분)
    &lt;ul&gt;
      &lt;li&gt;읽어보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;에 대한 정의 부분인 듯&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; 부분이 자동 생성할 데이터에 대한 설정 부분이다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt;을 살펴보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;name, phone_number, password&lt;/code&gt; 에 대해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;를 이용해서 데이터 값의 형태를 잡아준 모습이다&lt;/li&gt;
      &lt;li&gt;위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;seeder&lt;/code&gt; 부분은 설정해줘야 하는 값들이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;seeder&lt;/code&gt; 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;locale&lt;/code&gt; 부분은 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;에서 한국 이름을 생성하고 싶어서 설정한 값이다(&lt;code class=&quot;highlighter-rouge&quot;&gt;faker&lt;/code&gt; 또한 같은 맥락)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여기서 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;에 대한 설정은 없다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/7ca26ecb-32b7-419c-82be-8a566701ea8a/%E1%84%8B%E1%85%B2%E1%84%8C%E1%85%A5%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;users/models.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;를 사용한 모습
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/e7e3cba2-d9cf-4718-8401-3fc506a5c29f/%E1%84%8B%E1%85%B5%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%86%E1%85%A1%E1%86%AB%E1%84%83%E1%85%B3%E1%86%AF%E1%84%8B%E1%85%A5%E1%84%8C%E1%85%AE%E1%86%B7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;가 자동으로 생성해준 이메일, 이처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;django seed&lt;/code&gt;가 이메일 필드를 인식하고 생성해줬기 때문에, 앱 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;를 작성해야 한다는 점에서는 이해가 됐을 거라 생각한다&lt;/li&gt;
  &lt;li&gt;우리가 원하는 앱 안에 원하는 형태로 &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt;를 작성하게 되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt;가 있는 곳에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;를 찍었을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; 기능이 생성된다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/36ad472c-e954-4a91-9451-0e22f1fb15e1/%E1%84%92%E1%85%A6%E1%86%AF%E1%84%91%E1%85%B3%20%E1%84%89%E1%85%A2%E1%86%BC%E1%84%89%E1%85%A5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt;가 있는 곳에서 명령어를 실행하면 된다
    &lt;blockquote&gt;
      &lt;p&gt;python manage.py seed_users(생성된 seed파일 이름)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/hiyee-![](https://images.velog.io/images/hiyee-gj/post/cdcda335-f717-450e-914a-168c17c13471/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5.png)gj/post/3f3173dc-fe32-480b-a43d-cdb302fe84cf/%E1%84%89%E1%85%A5%E1%86%BC%E1%84%80%E1%85%A9%E1%86%BC%20%E1%84%86%E1%85%A6%E1%84%89%E1%85%B5%E1%84%8C%E1%85%B5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;성공했을 경우 몇 개를 생성했는지 성공 메시지를 알려준다(&lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; 파일에서 설정한 내용임)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seed로-데이터-형태-다듬기&quot;&gt;seed로 데이터 형태 다듬기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;여러 데이터 형태를 확인하기 위해 테스트용 &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;을 만들어서 확인한다
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/2d0bc3bc-7f3b-4813-b7bd-99ddbd440c8e/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;모델
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/b9361d46-8f28-4a34-8416-ce80cfcbb6dc/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20seeder.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;시드파일
&lt;img src=&quot;https://images.velog.io/images/hiyee-gj/post/247634fb-74e7-4c00-9b91-106262fcd4ed/%E1%84%8C%E1%85%A2%E1%84%8B%E1%85%B2%E1%84%82%E1%85%B5%E1%86%B7%20%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;자동 생성된 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seed-응용&quot;&gt;seed 응용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;관계가 형성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;을 자동 생성해주면 생기는 문제가 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 대한 문제가 발생하는 경우다&lt;/li&gt;
  &lt;li&gt;이 경우에는 관계가 맺어진 테이블을 불러온 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;FK&lt;/code&gt;에 불러온 테이블의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;를 랜덤하게 설정해주는 방법으로 해결한다&lt;/li&gt;
  &lt;li&gt;이 경우를 응용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; 필드의 내용을 실제로 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;img url&lt;/code&gt;을 저장한 파일을 불러와 랜덤하게 설정해서 실제 작동되도록 하는 방법을 공부할 예정이다&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>hiyee</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">project(greatingdor)</summary>
      

      
      
    </entry>
  
</feed>
